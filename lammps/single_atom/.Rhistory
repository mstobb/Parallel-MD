for(i in 1:401){Aout[i] = optim( c(Ain[i], 13), function(x){x1=x[1];x2=x[2];sum( (ztest - x1*xtest^2 - x2*ytest^2)^2 )},control=list(abstol=10^-14))$par[1]}
plot(Ain,Aout)
for(i in 1:401){Aout[i] = optim( c(Ain[i], 13), function(x){x1=x[1];x2=x[2];sum( (ztest - x1*xtest^2 - x2*ytest^2)^2 )},control=list(abstol=10^-16))$par[1]}
plot(Ain,Aout)
for(i in 1:401){Aout[i] = optim( c(Ain[i], 13), function(x){x1=x[1];x2=x[2];sum( (ztest - x1*xtest^2 - x2*ytest^2)^2 )},control=list(reltol=10^-16))$par[1]}
plot(Ain,Aout)
for(i in 1:401){Aout[i] = optim( c(Ain[i], 13), function(x){x1=x[1];x2=x[2];sum( (ztest - x1*xtest^2 - x2*ytest^2)^2 )},method = "BFGS",control=list(reltol=10^-16))$par[1]}
plot(Ain,Aout)
for(i in 1:401){Aout[i] = optim( c(Ain[i], 13), function(x){x1=x[1];x2=x[2];sum( (ztest - x1*xtest^2 - x2*ytest^2)^2 )},method = "SANN",control=list(reltol=10^-16))$par[1]}
plot(Ain,Aout)
load("~/Dropbox/phd_work/summer_work_friction/model_fitting.RData")
plot(x,y)
plot(x,y)
dev.off)()
dev.off()
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,lny)
func_log
func_lny = function(z,w) { z1 = z[1]; z2 = z[2]; z3 = z[3]; z4 = z[4]; z5 = z[5]; (z1 + z2 * w^(z4) + z3 * w^(z5)) }
plot(Ain,Aout)
plot(Bin,Bout)
tail(Bout)
A = Ain[50]
A = Aout[50]
B = Bout[400]
plot(Cin,Cout)
C = Cout[50]
plot(qin,qout)
q = qout[201]
plot(Qin,Qout)
Q = Qout[201]
mu = func_lny(c(A,B,C,q,Q),x)
plot(x,mu)
point(x,lny)
points(x,lny)
plot(x,lny)
points(x,mu)
lny
mu
func_lny
func_log
exp(mu)
y
func_lny
mu = func_lny(c(A,B,C,q,Q), x)
func_log2 = function(z) (lny - (z[1] + z[2] * x^(z[4]) + z[3] * x^(z[5])))^2
optim(c(A,B,C,q,Q),func_log2)
func_log2 = function(z) sum((lny - (z[1] + z[2] * x^(z[4]) + z[3] * x^(z[5])))^2)
optim(c(A,B,C,q,Q),func_log2)
parm = optim(c(A,B,C,q,Q),func_log2)$par
parm
func_lny = function(z,w) z[1] + z[2] * x^(z[4]) + z[3] * x^(z[5])
mu = func_lny(parm,x)
plot(x,mu)
points(x,lny)
plot(x,lny)
points(x,mu)
x
for (i in 1:89) mu[i] = func_lny(parm,x[i])
warnings()
mu
func_lny
func_lny = function(z,w) z[1] + z[2] * w^(z[4]) + z[3] * w^(z[5])
mu = func_lny(parm,x)
for (i in 1:89) mu[i] = func_lny(parm,x[i])
mu
d = 1:100
mu = func_lny(parm,d)
plot(d,mu)
d = seq(0,1,by = 0.01)
mu = func_lny(parm,d)
plot(d,mu)
parm
plot(qin,qout)
tail(qout)
mu = func_lny(c(A,B,C,q,Q),d)
plot(d,mu)
mu = func_lny(c(A,B,C,q,Q),x)
plot(x,mu)
nls(log(y) ~ a + b*x^z1 + c*x^z2, start = list(a = 1, b = 1, c = 1, z1 = 1, z2 = 1))
nls(log(y) ~ a + b*x^z1 + c*x^z2, start = list(a = 1, b = 1, c = 1, z1 = 1, z2 = 2))
nls(log(y) ~ a + b*x^z1 + c*x^z2, start = list(a = A, b = B, c = C, z1 = q, z2 = Q))
func_log
func_log2
func_log2 = function(z,x,y) sum((y - (z[1] + z[2] * x^(z[4]) + z[3] * x^(z[5])))^2)
func_log2 = function(z,w,t) sum((t - (z[1] + z[2] * w^(z[4]) + z[3] * w^(z[5])))^2)
optim(c(A,B,C,q,Q),func_log2,w = x, t = lny)
help(optim)
optim(c(A,B,C,q,Q),func_log2,w = x, t = lny,method="BFGS")
plot(x,lny)
func_lny
parm = optim(c(A,B,C,q,Q),func_log2,w = x, t = lny,method="BFGS")$par
points(x,func_lny(parm,x))
optim(parm,func_log2,w = x, t = lny,method="BFGS")
parm
optim(parm,func_log2,w = x, t = lny)
optim(jiggle(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
help(jitter)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
optim(jitter(parm),func_log2,w = x, t = lny)
parm_in = 0
parm_out = 0
for (i in 1:100) {
parm_in[i] = jitter(A,B,C,q,Q)
test = try(optim(parm[i],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
next
else
parm_out[i] = test
}
parm_in[i] = jitter(A,B,C,q,Q)
parm_in[i,:] = jitter(A,B,C,q,Q)
parm_in[i,] = jitter(A,B,C,q,Q)
parm_in[i,] = jitter(c(A,B,C,q,Q)
)
parm_in[1,] = jitter(c(A,B,C,q,Q))
jitter(c(A,B,C,q,Q))
c(A,B,C,q,Q)
c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in = c(0,0,0,0,0)
parm_out = parm_in
parm_in = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in[1,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in[,1] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in= as.matrix(parm_in)
parm_in[1,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in[1] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
help(matrix)
matrix(0,5,100)
parm_in = matrix(0,3,5)
parm_in = matrix(0,5,100)
parm_in[1,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in[2,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
parm_in = matrix(0,5,100)
parm_out = parm_in
for (i in 1:100) {
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
test = try(optim(parm_in[i,],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[i,] = matrix(NAN,5,1)
else
parm_out[i,] = test
}
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
i = 1
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
for (i in 1:100) {
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
test = try(optim(parm_in[i,],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[i,] = matrix(NAN,5,1)
else
parm_out[i,] = test
}
tail(parm_in)
tail(parm_out)
plot(parm_in,parm_out)
plot(parm_in,parm_out)
help(NAN)
'NAN'
NaN
for (i in 1:100) {
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
test = try(optim(parm_in[i,],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[i,] = matrix(NaN,5,1)
else
parm_out[i,] = test
}
for (i in 1:101) {
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
test = try(optim(parm_in[i,],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[i,] = matrix(NaN,5,1)
else
parm_out[i,] = test
}
for (i in 1:99) {
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
test = try(optim(parm_in[i,],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[i,] = matrix(NaN,5,1)
else
parm_out[i,] = test
}
for (i in 1:99) {
parm_in[i,] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
test = try(optim(parm_in[i,],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[i,] = matrix(NaN,5,1)
else
parm_out[i,] = test
}q
for (i in 1:100) {
parm_in[,i] = c(jitter(A),jitter(B),jitter(C),jitter(q),jitter(Q))
test = try(optim(parm_in[,i],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,5,1)
else
parm_out[,i] = test
}
summary(parm_out)
aggregate(parm_out)
mean(parm_out)
help(mean)
parm_out
mean(parm_out,2)
mean(parm_out,1)
rowmean(parm_out)
rowmeans(parm_out)
rowMeans(parm_out)
mu = func_lny(rowMeans(parm_out),x)
plot(x,mu)
init_par = c(1e-13,44,1e7,0.1,2)
for (i in 1:100) {
parm_in[,i] = c(jitter(init_par[1]),jitter(init_par[2]),jitter(init_par[3]),jitter(init_par[4]),jitter(init_par[5]))
test = try(optim(parm_in[,i],func_log2,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,5,1)
else
parm_out[,i] = test
}
rowMeans(parm_out)
rowVar(parm_out)
rowVars(parm_out)
var(parm_out)
library(genefilter)
rm(ones)
func_wr = function(z,w,t) sum((t - z[1] - z[2] * (w^z[3]))^2)
parm_in = matrix(0,3,100)
parm_out = parm_in
for (i in 1:100) {
parm_in[,i] = c(jitter(1),jitter(2),jitter(3)
test = try(optim(parm_in[,i],func_wr,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test
}
for (i in 1:100) {
parm_in[,i] = c(jitter(1),jitter(2),jitter(3)
test = try(optim(parm_in[,i],func_wr,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test
}
for (i in 1:100) {
parm_in[,i] = c(jitter(1),jitter(2),jitter(3))
test = try(optim(parm_in[,i],func_wr,w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test
}
parm_out
rowMeans(parm_out)
mu = 0.855849 + 2.271446 * x^2.998277
plot(x,mu)
points(x,lny)
plot(x,lny)
points(x,mu)
mu = 0.855849 + 227.1446 * x^2.998277
points(x,mu)
mu = -5.855849 + 227.1446 * x^2.998277
points(x,mu)
mu = -5.855849 + 227.1446 * x^29.98277
points(x,mu)
mu = -5.855849 + 227.1446 * x^299.8277
points(x,mu)
plot(x,lny)
mu = -5.855849 + 227.1446 * x^29982.77
points(x,mu)
mu = -5.855849 + 227.1446 * x^0.2998277
points(x,mu)
plot(x,lny)
mu = -5.855849 + 2.271446 * x^0.2998277
points(x,mu)
plot(x,lny)
mu = -5.855849 + 2.271446 * x^0.02998277
points(x,mu)
plot(x,lny)
mu = -5.855849 + 2271.446 * x^0.02998277
points(x,mu)
plot(x,lny)
mu = -5.855849 + 2.271446 * x^0.002998277
points(x,mu)
mu = -5.855849 + 2.271446 * x^2.998277
points(x,mu)
plot(x,lny)
mu = -5.855849 + 22.71446 * x^2.998277
points(x,mu)
plot(x,lny)
library(mgcv)
lm(lny ~ poly(x,2,raw=TRUE))
mu = -7.07 + 351.90*x + 8254120.22 * x^2
points(x,mu)
emu = exp(mu)
plot(x,y)
points(x,emu)
optim(c(7,300,8e5),function(z,w,t) sum((t - z[1]-z[2]*w - z[3]*w^2)^2 ),w=x,t = lny)
optim(c(7,300,8e5),function(z,w,t) sum((t - z[1]-z[2]*w - z[3]*w^2)^2 ),w=x,t = lny,method="BFGS")
optim(c(7,300,8e5),function(z,w,t) sum((t - z[1]-z[2]*w - z[3]*w^2)^2 ),w=x,t = lny,method="BFGS")$par
mu = -12.45107 + 13741.69*x + 800024.63057 * x^2
plot(x,lny)
points(x,mu)
lm(lny ~ poly(x,2,raw=TRUE))
exp(-7.07)
test_x = seq(-5,5,by = 0.01)
test_y = 2 + 3 * test_x^2
optim(c(1,1,1),function(z) sum((test_y - (z[1]+ z[2]*test_x^2))^2))$par
optim(c(1,1),function(z) sum((test_y - (z[1]+ z[2]*test_x^2))^2))$par
optim(c(1,1),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
optim(c(1,1,1),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
optim(c(1,1,1.9),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
optim(c(1,1,2.5),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
optim(c(1,1,2),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
plot(test_x,test_y)
points(test_x, 1 + 1.2*test_x^2)
optim(c(1,1,2),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2),method="BFGS")$par
optim(c(1,1,2.1),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2),method="BFGS")$par
optim(c(1,1),function(z) sum((test_y - (z[1]+ z[2]*test_x^2))^2),method="BFGS")$par
points(test_x, 2 + 3*test_x^2)
optim(c(1,1,2),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2),method="SANN")$par
optim(c(1.1,1.1,2.1),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2),method="SANN")$par
points(test_x, 4.4 -3.83*test_x^-14.044004)
plot(x,log(lny))
plot(x,lny)
optim(c(1.1,1.1,2.1),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
optim(c(1.1,1.5,2.1),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
optim(c(1.1,1.5,1.9),function(z) sum((test_y - (z[1]+ z[2]*test_x^z[3]))^2))$par
optim(c(1.1,1.5,1.9),function(z,w,t) sum((t - (z[1]+ z[2]*test_w^z[3]))^2),w=test_x,t=test_y)$par
optim(c(1.1,1.5,1.9),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=test_x,t=test_y)$par
optim(c(1,1,1.9),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=test_x,t=test_y)$par
optim(c(0,1,1.9),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=test_x,t=test_y)$par
optim(c(0,1,1),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=test_x,t=test_y)$par
optim(c(1,1,1),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=test_x,t=test_y)$par
func_log2
optim(c(1,1,1),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=test_x,t=test_y)$par
test_func = function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2)
test_func(c(1.1,1.1,1.1),test_x,test_y)
test_func(c(1.1,1.1,2.1),test_x,test_y)
test_func(c(1.1,3.1,2.1),test_x,test_y)
test_func(c(1.1,3.1,1.9),test_x,test_y)
test_x = seq(1,4,by = 0.01)
test_y = 1 + 2*test_x^3
test_func = function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2)
test_func(c(1.1,3.1,1.9),test_x,test_y)
optim(c(1,1,1),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=test_x,t=test_y)$par
plot(test_x,test_y)
optim(c(1,1,1),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
plot(x,lny)
points(x,-102 + 231*x^.114922)
parm_in[,i] = c(jitter(1),jitter(1),jitter(1))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test
}
for (i in 1:100) {
parm_in[,i] = c(jitter(1),jitter(1),jitter(1))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par,silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test
}
rowMeans(parm_out)
plot(x,lny)
points(x, -95.19 + 2512*x^.2625518)
plot(x, -95.19 + 2512*x^.2625518)
parm_out
points(x,lny)
t(parm_out)
optim(c(1,1,1),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(c(1,1,1),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny)$par
plot(x,lny)
points(x,-34 + 375.9 * x^0.3379035)
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny,method="BFGS")$par
plot(x,lny)
points(x,-35.319 + 381.40 * x^0.3349037)
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny,method="SANN")$par
plot(x,lny)
points(x,0.8558384 + .6668833 * x^11.2595071)
help(optim)
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny,method="CG")$par
plot(x,lny)
points(x,-1.2567 + 6.0659695 * x^.1471677)
save.image("~/Dropbox/phd_work/summer_work_friction/model_fitting/model_fitting2.RData")
optim(jitter(c(1,1,1)),function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny,method="CG")
value = matrix(0,1,100)
for (i in 1:100) {
parm_in[,i] = c(jitter(1),jitter(1),jitter(1))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny),silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test$par
value[i] = test$value
}
value
min(value)
parm_out[,94]
plot(x,lny)
points(x,-11.298950 + 41094.730306 * x^1.16324)
parm_in = matrix(0,3,1000)
parm_out = parm_in
for (i in 1:1000) {
parm_in[,i] = c(jitter(1),jitter(1),jitter(1))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny),silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test$par
value[i] = test$value
}
min(value)
for (i in 1:1000) {
parm_in[,i] = c(jitter(-7),jitter(1),jitter(1.5))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny),silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test$par
value[i] = test$value
}
min(value)
for (i in 1:1000) {
parm_in[,i] = c(jitter(-7),jitter(1),jitter(1.5))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny),silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test$par
value[i] = test$value
}
min(value)
for (i in 1:1000) {
parm_in[,i] = c(jitter(1),jitter(1),jitter(1.5))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[3]))^2),w=x,t=lny),silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test$par
value[i] = test$value
}
min(value)
which(value<62)
value(75)
value[75]
value[149]
parm_out[,75]
plot(x,lny)
points(x,-8.984025 + 305815.606760 *x^1.483844)
parm_in = matrix(0,5,1000)
parm_out = parm_in
value = matrix(0,1,1000)
for (i in 1:1000) {
parm_in[,i] = c(jitter(1),jitter(1),jitter(1),jitter(1),jitter(1))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[4]) + z[3]*w^z[5])^2),w=x,t=lny),silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test$par
value[i] = test$value
}
min(value)
which(value<112)
parm_out[,559]
plot(x,lny)
points(x, -15.8258263 +  4147.4949939*x^39.4665459 -4685.8156746*x^0.8045477)
plot(x, -15.8258263 +  4147.4949939*x^39.4665459 -4685.8156746*x^0.8045477)
parm_in = matrix(0,5,1000)
parm_out = parm_in
value = matrix(0,1,1000)
for (i in 1:1000) {
parm_in[,i] = c(jitter(1),jitter(1),jitter(1),jitter(1),jitter(1))
test = try(optim(parm_in[,i],function(z,w,t) sum((t - (z[1]+ z[2]*w^z[4]) + z[3]*w^z[5])^2),w=x,t=lny,method="BFGS"),silent=TRUE)
if ('try-error' %in% class(test))
parm_out[,i] = matrix(NaN,3,1)
else
parm_out[,i] = test$par
value[i] = test$value
}
min(value)
setwd("~/Dropbox/phd_work/summer_work_friction/lammps/single_atom")
x = read.csv("test.csv")
head(x)
plot(x$time)
plot(x$X)
plot(x$Z)
